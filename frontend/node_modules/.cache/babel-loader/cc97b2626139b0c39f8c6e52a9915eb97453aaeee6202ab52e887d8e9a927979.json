{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:8080/api'\n});\n\n// Interceptor para adicionar o token em todas as requisições\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Interceptor para tratar erros de autenticação\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/auth';\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData)\n};\nexport const postService = {\n  getPosts: () => api.get('/posts'),\n  getPost: id => api.get(`/posts/${id}`),\n  createPost: postData => api.post('/posts', postData),\n  updatePost: (id, postData) => api.put(`/posts/${id}`, postData),\n  deletePost: id => api.delete(`/posts/${id}`),\n  likePost: id => api.post(`/posts/${id}/like`),\n  comment: (id, comment) => api.post(`/posts/${id}/comments`, comment)\n};\nexport const userService = {\n  getProfile: id => api.get(`/users/${id}`),\n  updateProfile: (id, userData) => api.put(`/users/${id}`, userData),\n  follow: id => api.post(`/users/${id}/follow`),\n  unfollow: id => api.post(`/users/${id}/unfollow`)\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","authService","login","credentials","post","register","userData","postService","getPosts","get","getPost","id","createPost","postData","updatePost","put","deletePost","delete","likePost","comment","userService","getProfile","updateProfile","follow","unfollow"],"sources":["C:/Users/Rodrigo/Documents/programa/devexp/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8080/api'\r\n});\r\n\r\n// Interceptor para adicionar o token em todas as requisições\r\napi.interceptors.request.use(config => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Interceptor para tratar erros de autenticação\r\napi.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/auth';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const authService = {\r\n  login: (credentials) => api.post('/auth/login', credentials),\r\n  register: (userData) => api.post('/auth/register', userData),\r\n};\r\n\r\nexport const postService = {\r\n  getPosts: () => api.get('/posts'),\r\n  getPost: (id) => api.get(`/posts/${id}`),\r\n  createPost: (postData) => api.post('/posts', postData),\r\n  updatePost: (id, postData) => api.put(`/posts/${id}`, postData),\r\n  deletePost: (id) => api.delete(`/posts/${id}`),\r\n  likePost: (id) => api.post(`/posts/${id}/like`),\r\n  comment: (id, comment) => api.post(`/posts/${id}/comments`, comment),\r\n};\r\n\r\nexport const userService = {\r\n  getProfile: (id) => api.get(`/users/${id}`),\r\n  updateProfile: (id, userData) => api.put(`/users/${id}`, userData),\r\n  follow: (id) => api.post(`/users/${id}/follow`),\r\n  unfollow: (id) => api.post(`/users/${id}/unfollow`),\r\n};\r\n\r\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACrC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACG,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC3BO,QAAQ,IAAIA,QAAQ,EACpBC,KAAK,IAAI;EAAA,IAAAC,eAAA;EACP,IAAI,EAAAA,eAAA,GAAAD,KAAK,CAACD,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,OAAO;EAChC;EACA,OAAOC,OAAO,CAACC,MAAM,CAACR,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMS,WAAW,GAAG;EACzBC,KAAK,EAAGC,WAAW,IAAKxB,GAAG,CAACyB,IAAI,CAAC,aAAa,EAAED,WAAW,CAAC;EAC5DE,QAAQ,EAAGC,QAAQ,IAAK3B,GAAG,CAACyB,IAAI,CAAC,gBAAgB,EAAEE,QAAQ;AAC7D,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG;EACzBC,QAAQ,EAAEA,CAAA,KAAM7B,GAAG,CAAC8B,GAAG,CAAC,QAAQ,CAAC;EACjCC,OAAO,EAAGC,EAAE,IAAKhC,GAAG,CAAC8B,GAAG,CAAC,UAAUE,EAAE,EAAE,CAAC;EACxCC,UAAU,EAAGC,QAAQ,IAAKlC,GAAG,CAACyB,IAAI,CAAC,QAAQ,EAAES,QAAQ,CAAC;EACtDC,UAAU,EAAEA,CAACH,EAAE,EAAEE,QAAQ,KAAKlC,GAAG,CAACoC,GAAG,CAAC,UAAUJ,EAAE,EAAE,EAAEE,QAAQ,CAAC;EAC/DG,UAAU,EAAGL,EAAE,IAAKhC,GAAG,CAACsC,MAAM,CAAC,UAAUN,EAAE,EAAE,CAAC;EAC9CO,QAAQ,EAAGP,EAAE,IAAKhC,GAAG,CAACyB,IAAI,CAAC,UAAUO,EAAE,OAAO,CAAC;EAC/CQ,OAAO,EAAEA,CAACR,EAAE,EAAEQ,OAAO,KAAKxC,GAAG,CAACyB,IAAI,CAAC,UAAUO,EAAE,WAAW,EAAEQ,OAAO;AACrE,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG;EACzBC,UAAU,EAAGV,EAAE,IAAKhC,GAAG,CAAC8B,GAAG,CAAC,UAAUE,EAAE,EAAE,CAAC;EAC3CW,aAAa,EAAEA,CAACX,EAAE,EAAEL,QAAQ,KAAK3B,GAAG,CAACoC,GAAG,CAAC,UAAUJ,EAAE,EAAE,EAAEL,QAAQ,CAAC;EAClEiB,MAAM,EAAGZ,EAAE,IAAKhC,GAAG,CAACyB,IAAI,CAAC,UAAUO,EAAE,SAAS,CAAC;EAC/Ca,QAAQ,EAAGb,EAAE,IAAKhC,GAAG,CAACyB,IAAI,CAAC,UAAUO,EAAE,WAAW;AACpD,CAAC;AAED,eAAehC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}